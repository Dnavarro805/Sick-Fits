{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    // tells Apollo we will take care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      console.log({\n        existing,\n        args,\n        cache\n      });\n      const {\n        skip,\n        first\n      } = args; // Read the # of items on the page from the cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // check if we have existing items\n\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We dont have any items, we must go to the network to fetch them\n        return false;\n      } // If there are items, just return them from the cache, and non need to fo to the network\n\n\n      if (items.length) {\n        console.log(`There are ${items.length} items in the cache! Gonna send them to Apollo`);\n        return items;\n      }\n\n      return false; // fallback to network\n      // First thing it does is ask the read function for those items\n      // We can do 2 things here:\n      // 1. Return the tems because they are already in the cache\n      // 2. return falde from here (network request)\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      const {\n        skip,\n        first\n      } = args; // This runs when the Apollo client come back from the netwkr with  our product\n\n      console.log(`Merging items from the network ${incoming.length}`);\n      const merged = existing ? existing.slice(0) : [];\n\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      console.log(merged); // finally we return the merged items from the cache,\n\n      return merged;\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/Users/navar/Desktop/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA4B;AACvC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;;AACa;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAF;AAAYC,QAAAA,IAAZ;AAAkBC,QAAAA;AAAlB,OAAZ;AACA,YAAM;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBL,IAAxB,CAFiC,CAIjC;;AACA,YAAMM,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,YAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARiC,CAUjC;;AACA,YAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd;;AAEA,UAAGH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAtD,EAA6D;AACzD,eAAOG,KAAP;AACH;;AACD,UAAGA,KAAK,CAACI,MAAN,KAAiBd,KAApB,EAA2B;AACvB;AACA,eAAO,KAAP;AACH,OAnBgC,CAqBjC;;;AACA,UAAGU,KAAK,CAACI,MAAT,EAAiB;AACbjB,QAAAA,OAAO,CAACC,GAAR,CACK,aAAYY,KAAK,CAACI,MAAO,gDAD9B;AAGA,eAAOJ,KAAP;AACH;;AAED,aAAO,KAAP,CA7BiC,CA6BnB;AAEd;AAEA;AAEA;AAEA;AAEH,KAzCE;;AA0CHK,IAAAA,KAAK,CAAErB,QAAF,EAAYsB,QAAZ,EAAsB;AAAErB,MAAAA;AAAF,KAAtB,EAAgC;AACjC,YAAM;AAAEI,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBL,IAAxB,CADiC,CAEjC;;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAa,kCAAiCkB,QAAQ,CAACF,MAAO,EAA9D;AACA,YAAMG,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACiB,KAAT,CAAe,CAAf,CAAH,GAAsB,EAA7C;;AACA,WAAI,IAAIO,CAAC,GAAGnB,IAAZ,EAAkBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAtC,EAA8C,EAAEI,CAAhD,EAAmD;AAC/CD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAAEE,CAAC,GAAGnB,IAAN,CAApB;AACH;;AACDF,MAAAA,OAAO,CAACC,GAAR,CAAYmB,MAAZ,EARiC,CASjC;;AACA,aAAOA,MAAP;AACH;;AArDE,GAAP;AAuDH","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\r\n\r\nexport default function paginationField () {\r\n    return { \r\n        keyArgs: false, // tells Apollo we will take care of everything\r\n        read(existing = [], { args, cache }) {\r\n            console.log({ existing, args, cache });\r\n            const { skip, first } = args;\r\n\r\n            // Read the # of items on the page from the cache\r\n            const data = cache.readQuery({ query: PAGINATION_QUERY });\r\n            const count = data?._allProductsMeta?.count;\r\n            const page = skip / first + 1;\r\n            const pages = Math.ceil(count / first);\r\n\r\n            // check if we have existing items\r\n            const items = existing.slice(skip, skip + first).filter((x) => x);\r\n\r\n            if(items.length && items.length !== first && page === pages) {\r\n                return items;\r\n            }\r\n            if(items.length !== first) {\r\n                // We dont have any items, we must go to the network to fetch them\r\n                return false;\r\n            }\r\n\r\n            // If there are items, just return them from the cache, and non need to fo to the network\r\n            if(items.length) {\r\n                console.log(\r\n                    `There are ${items.length} items in the cache! Gonna send them to Apollo`\r\n                );\r\n                return items;\r\n            }\r\n\r\n            return false; // fallback to network\r\n\r\n            // First thing it does is ask the read function for those items\r\n\r\n            // We can do 2 things here:\r\n\r\n            // 1. Return the tems because they are already in the cache\r\n\r\n            // 2. return falde from here (network request)\r\n\r\n        },\r\n        merge (existing, incoming, { args }) {\r\n            const { skip, first } = args;\r\n            // This runs when the Apollo client come back from the netwkr with  our product\r\n            console.log(`Merging items from the network ${incoming.length}`);\r\n            const merged = existing ? existing.slice(0): [];\r\n            for(let i = skip; i < skip + incoming.length; ++i) {\r\n                merged[i] = incoming [i - skip];\r\n            }\r\n            console.log(merged);\r\n            // finally we return the merged items from the cache,\r\n            return merged;\r\n        },\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}