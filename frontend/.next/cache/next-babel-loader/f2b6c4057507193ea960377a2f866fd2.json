{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    // tells Apollo we will take care of everything\n    read: function read() {\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      console.log({\n        existing: existing,\n        args: args,\n        cache: cache\n      });\n      var skip = args.skip,\n          first = args.first; // Read the # of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      }); // console.log(data);\n      // // const count = data?._allProductsMeta?.count;\n      // // const page = skip / first + 1;\n      // // const pages = Math.ceil(count / first);\n      // check if we have existing items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      }); // If there are items, and there aren't enough items to satisfy how many were requested\n      // and we are on the last page, THEN just send it. \n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We dont have any items, we must go to the network to fetch them\n        return false;\n      } // If there are items, just return them from the cache, and non need to fo to the network\n\n\n      if (items.length) {\n        console.log(\"There are \".concat(items.length, \" items in the cache! Gonna send them to Apollo\"));\n        return items;\n      }\n\n      return false; // fallback to network\n      // First thing it does is ask the read function for those items\n      // We can do 2 things here:\n      // 1. Return the tems because they are already in the cache\n      // 2. return falde from here (network request)\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var skip = args.skip,\n          first = args.first; // This runs when the Apollo client come back from the netwkr with  our product\n\n      console.log(\"Merging items from the network \".concat(incoming.length));\n      var merged = existing ? existing.slice(0) : [];\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      console.log(merged); // finally we return the merged items from the cache,\n\n      return merged;\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/navar/Desktop/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","items","slice","filter","x","length","page","pages","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA4B;AACvC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;AACa;AAChBC,IAAAA,IAFG,kBAEkC;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,IAAI,EAAJA,IAAZ;AAAkBC,QAAAA,KAAK,EAALA;AAAlB,OAAZ;AADiC,UAEzBG,IAFyB,GAETJ,IAFS,CAEzBI,IAFyB;AAAA,UAEnBC,KAFmB,GAETL,IAFS,CAEnBK,KAFmB,EAIjC;;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb,CALiC,CAMjC;AACA;AACA;AACA;AAEA;;AACA,UAAMc,KAAK,GAAGV,QAAQ,CAACW,KAAT,CAAeN,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCM,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd,CAZiC,CAajC;AACA;;AACA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBR,KAAjC,IAA0CS,IAAI,KAAKC,KAAvD,EAA8D;AAC1D,eAAON,KAAP;AACH;;AACD,UAAGA,KAAK,CAACI,MAAN,KAAiBR,KAApB,EAA2B;AACvB;AACA,eAAO,KAAP;AACH,OArBgC,CAuBjC;;;AACA,UAAGI,KAAK,CAACI,MAAT,EAAiB;AACbX,QAAAA,OAAO,CAACC,GAAR,qBACiBM,KAAK,CAACI,MADvB;AAGA,eAAOJ,KAAP;AACH;;AAED,aAAO,KAAP,CA/BiC,CA+BnB;AAEd;AAEA;AAEA;AAEA;AAEH,KA3CE;AA4CHO,IAAAA,KA5CG,iBA4CIjB,QA5CJ,EA4CckB,QA5Cd,SA4CkC;AAAA,UAARjB,IAAQ,SAARA,IAAQ;AAAA,UACzBI,IADyB,GACTJ,IADS,CACzBI,IADyB;AAAA,UACnBC,KADmB,GACTL,IADS,CACnBK,KADmB,EAEjC;;AACAH,MAAAA,OAAO,CAACC,GAAR,0CAA8Cc,QAAQ,CAACJ,MAAvD;AACA,UAAMK,MAAM,GAAGnB,QAAQ,GAAGA,QAAQ,CAACW,KAAT,CAAe,CAAf,CAAH,GAAsB,EAA7C;;AACA,WAAI,IAAIS,CAAC,GAAGf,IAAZ,EAAkBe,CAAC,GAAGf,IAAI,GAAGa,QAAQ,CAACJ,MAAtC,EAA8C,EAAEM,CAAhD,EAAmD;AAC/CD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGf,IAAL,CAApB;AACH;;AACDF,MAAAA,OAAO,CAACC,GAAR,CAAYe,MAAZ,EARiC,CASjC;;AACA,aAAOA,MAAP;AACH;AAvDE,GAAP;AAyDH","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\r\n\r\nexport default function paginationField () {\r\n    return { \r\n        keyArgs: false, // tells Apollo we will take care of everything\r\n        read(existing = [], { args, cache }) {\r\n            console.log({ existing, args, cache });\r\n            const { skip, first } = args;\r\n\r\n            // Read the # of items on the page from the cache\r\n            const data = cache.readQuery({ query: PAGINATION_QUERY });\r\n            // console.log(data);\r\n            // // const count = data?._allProductsMeta?.count;\r\n            // // const page = skip / first + 1;\r\n            // // const pages = Math.ceil(count / first);\r\n\r\n            // check if we have existing items\r\n            const items = existing.slice(skip, skip + first).filter((x) => x);\r\n            // If there are items, and there aren't enough items to satisfy how many were requested\r\n            // and we are on the last page, THEN just send it. \r\n            if (items.length && items.length !== first && page === pages) {\r\n                return items;\r\n            }\r\n            if(items.length !== first) {\r\n                // We dont have any items, we must go to the network to fetch them\r\n                return false;\r\n            }\r\n\r\n            // If there are items, just return them from the cache, and non need to fo to the network\r\n            if(items.length) {\r\n                console.log(\r\n                    `There are ${items.length} items in the cache! Gonna send them to Apollo`\r\n                );\r\n                return items;\r\n            }\r\n\r\n            return false; // fallback to network\r\n\r\n            // First thing it does is ask the read function for those items\r\n\r\n            // We can do 2 things here:\r\n\r\n            // 1. Return the tems because they are already in the cache\r\n\r\n            // 2. return falde from here (network request)\r\n\r\n        },\r\n        merge (existing, incoming, { args }) {\r\n            const { skip, first } = args;\r\n            // This runs when the Apollo client come back from the netwkr with  our product\r\n            console.log(`Merging items from the network ${incoming.length}`);\r\n            const merged = existing ? existing.slice(0): [];\r\n            for(let i = skip; i < skip + incoming.length; ++i) {\r\n                merged[i] = incoming[i - skip];\r\n            }\r\n            console.log(merged);\r\n            // finally we return the merged items from the cache,\r\n            return merged;\r\n        },\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}